# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

defaults: &defaults
  working_directory: ~/repo

version: 2.1
jobs:
  node-install:
    <<: *defaults
    docker:
      - image: circleci/node:12-browsers
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - persist_to_workspace:
          root: ./
          paths:
            - "**"

  run-tests:
    <<: *defaults
    docker:
      # specify the version you desire here
      - image: circleci/node:12-browsers
    steps:
      - attach_workspace:
          at: ~/repo
      - run: npm run test

  terraform-check:
    <<: *defaults
    docker:
      - image: hashicorp/terraform:0.12.26
    steps:
      - checkout
      - run:
          name: terraform init
          command: cd deploy && terraform init -backend=false
      - run:
          name: terraform validate
          command: cd deploy && terraform validate
      - run:
          name: terraform format check
          command: cd deploy && terraform fmt -check

  build-frontend:
    <<: *defaults
    docker:
      # specify the version you desire here
      - image: circleci/node:12-browsers
    steps:
      - attach_workspace:
          at: ~/repo
      - run: npm run build
      # Persist entire project directory to the next job
      - persist_to_workspace:
          root: ./
          paths:
            - "**"

  build-backend:
    <<: *defaults
    docker:
      - image: alpine:latest
    steps:
      - attach_workspace:
          at: ~/repo
      - run: apk add --update zip
      - run: cd backend && zip backend.zip index.js
      - persist_to_workspace:
          root: ./
          paths:
            - backend.zip

  terraform-plan-and-apply:
    docker:
      - image: hashicorp/terraform:0.12.26
    steps:
      - checkout
      - run:
          name: terraform init
          command: cd deploy && terraform init
      - run:
          name: terraform plan
          command: cd deploy && terraform plan
      - run:
          name: terraform apply
          command: cd deploy && terraform apply -auto-approve

  terraform-destroy:
    docker:
      - image: hashicorp/terraform:0.12.26
    steps:
      - checkout
      - run:
          name: terraform init
          command: cd deploy && terraform init
      - run:
          name: terraform destroy
          command: cd deploy && terraform destroy -auto-approve

  deploy-frontend:
    <<: *defaults
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: ~/repo
      # - run:
      #     name: Configure AWS CLI
      #     command: aws configure set default.region ${AWS_DEFAULT_REGION}
      - run: ls
      - run: cd backend && ls
      - aws-cli/setup
      - run:
          name: Deploy build directory
          command: aws s3 cp build/ s3://closet-manager.okeegan.com --recursive

  # deploy-backend:
  #   <<: *defaults

orbs:
  aws-cli: circleci/aws-cli@1.2.1

# Specify workflows
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - node-install:
          filters:
            branches:
              only: master
      - run-tests:
          filters:
            branches:
              only: master
          requires:
            - node-install
      - terraform-check:
          filters:
            branches:
              only: master
      - build-frontend:
          filters:
            branches:
              only: master
          requires:
            - run-tests
      - build-backend:
          filters:
            branches:
              only: master
          requires:
            - node-install
      - terraform-plan-and-apply:
          filters:
            branches:
              only: master
          requires:
            - build-frontend
            - build-backend
            - terraform-check
      - deploy-frontend:
          filters:
            branches:
              only: master
          requires:
            - terraform-plan-and-apply
      - click_here_to_delete:
          type: approval
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only: master
      - terraform-destroy:
          requires:
            - click_here_to_delete
          filters:
            branches:
              only: master
